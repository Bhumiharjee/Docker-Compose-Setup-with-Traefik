# traefik-compose.yml
services:
  traefik:
    image: traefik:v2.10
    command:
      - "--api.insecure=false"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.myresolver.acme.tlschallenge=true"
      - "--certificatesresolvers.myresolver.acme.email=saurav.k@dynapt.co.in"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "letsencrypt:/letsencrypt"
    networks:
      - traefik-public
    restart: always

networks:
  traefik-public:
    external: true
volumes:
  letsencrypt:

---
# frontend-compose.yml

services:
  hurry-solv-web:
    build:
      context: .
      dockerfile: Dockerfile
    networks:
      - traefik-public
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`test.sauravkumar.cloud`)"
      - "traefik.http.routers.frontend.entrypoints=websecure"
      - "traefik.http.routers.frontend.tls.certresolver=myresolver"
      - "traefik.http.services.frontend.loadbalancer.server.port=80"
    environment:
      - VITE_BASE_URL=${VITE_BASE_URL}
    restart: always
    deploy:
      replicas: 1

networks:
  traefik-public:
    external: true

---
# backend-compose.yml
services:
  web:
    build:
      context: .
      dockerfile: Dockerfile
    networks:
      - traefik-public
      - backend-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=Host(`backend.sauravkumar.cloud`)"
      - "traefik.http.routers.backend.entrypoints=websecure"
      - "traefik.http.routers.backend.tls.certresolver=myresolver"
      - "traefik.http.routers.backend.service=backend-service"
      - "traefik.http.services.backend-service.loadbalancer.server.port=8000"
      # Add path prefix if your backend API uses one
      # - "traefik.http.routers.backend.rule=Host(`backend.sauravkumar.cloud`) && PathPrefix(`/api`)"
    environment:
      - ENVIRONMENT=${ENVIRONMENT}
      - DEBUG=${DEBUG}
      - SECRET_KEY=${SECRET_KEY}
      - DATABASE_URL=${DATABASE_URL}
      - TWILIO_ACCOUNT_SID=${TWILIO_ACCOUNT_SID}
      - TWILIO_AUTH_TOKEN=${TWILIO_AUTH_TOKEN}
      - TWILIO_PHONE_NUMBER=${TWILIO_PHONE_NUMBER}
      - MAIL_USERNAME=${MAIL_USERNAME}
      - MAIL_PASSWORD=${MAIL_PASSWORD}
      - MAIL_FROM=${MAIL_FROM}
      - MAIL_PORT=${MAIL_PORT}
      - MAIL_SERVER=${MAIL_SERVER}
      - MAIL_FROM_NAME=${MAIL_FROM_NAME}
      - PAYPAL_BASE_URL=${PAYPAL_BASE_URL}
      - PAYPAL_CLIENT_ID=${PAYPAL_CLIENT_ID}
      - PAYPAL_CLIENT_SECRET=${PAYPAL_CLIENT_SECRET}
      - GOOGLE_APPLICATION_CREDENTIALS=${GOOGLE_APPLICATION_CREDENTIALS}
      - APPLE_KEYS_URL=${APPLE_KEYS_URL}
      - APPLE_ISSUER = ${APPLE_ISSUER}
      - APPLE_CLIENT_ID = ${APPLE_CLIENT_ID}

    depends_on:
      db:
        condition: service_healthy
    restart: always
    deploy:
      replicas: 1
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]  # Note: Changed to http and localhost
      interval: 30s
      timeout: 10s
      retries: 3

  db:
    image: postgres:15-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "5432:5432"
    networks:
      - backend-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

networks:
  traefik-public:
    external: true
  backend-network:
    driver: bridge

volumes:
  postgres_data:
